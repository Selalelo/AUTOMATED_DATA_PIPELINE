name: Weather Data Pipeline

on:
  schedule:
    # Run every hour at minute 0
    - cron: '0 * * * *'
  workflow_dispatch: # Allow manual trigger

env:
  PYTHON_VERSION: '3.9'
  DBT_PROFILES_DIR: ${{ github.workspace }}/weather_data_project/my_project

jobs:
  weather-data-pipeline:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install dbt-postgres psycopg2-binary requests python-dotenv
        if [ -f weather_data_project/streamlit_app/requirements.txt ]; then
          pip install -r weather_data_project/streamlit_app/requirements.txt
        fi

    - name: Create dbt profiles directory
      run: |
        mkdir -p ~/.dbt
        mkdir -p ${{ env.DBT_PROFILES_DIR }}

    - name: Create dbt profiles.yml
      run: |
        cat > ~/.dbt/profiles.yml << EOF
        my_project:
          target: dev
          outputs:
            dev:
              type: postgres
              host: ${{ secrets.DB_HOST }}
              user: ${{ secrets.DB_USER }}
              password: ${{ secrets.DB_PASSWORD }}
              port: ${{ secrets.PORT }}
              dbname: ${{ secrets.DB_NAME }}
              schema: ${{ secrets.DB_SCHEMA }}
              threads: 4
              keepalives_idle: 0
              sslmode: require
        EOF

    - name: Test Aiven PostgreSQL connection
      run: |
        python -c "
        import psycopg2
        import os
        try:
            conn = psycopg2.connect(
                host='${{ secrets.DB_HOST }}',
                port='${{ secrets.PORT }}',
                user='${{ secrets.DB_USER }}',
                password='${{ secrets.DB_PASSWORD }}',
                database='${{ secrets.DB_NAME }}',
                sslmode='require'
            )
            print('Successfully connected to Aiven PostgreSQL!')
            conn.close()
        except Exception as e:
            print(f'Connection failed: {e}')
            exit(1)
        "

    - name: Run API request and insert data
      env:
        API_KEY: ${{ secrets.RAPIDAPI_KEY }}
        API_URL: ${{ secrets.API_URL }}
        POSTGRES_HOST: ${{ secrets.DB_HOST }}
        POSTGRES_PORT: ${{ secrets.PORT }}
        POSTGRES_USER: ${{ secrets.DB_USER }}
        POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
        POSTGRES_DB: ${{ secrets.DB_NAME }}
        POSTGRES_SCHEMA: ${{ secrets.DB_SCHEMA }}
        POSTGRES_SSLMODE: require
      run: |
        cd weather_data_project/api_request
        python -m weather_data_project.api_request.insert_data


    - name: Run dbt debug
      run: |
        cd weather_data_project/my_project
        dbt debug

    - name: Run dbt deps
      run: |
        cd weather_data_project/my_project
        dbt deps || echo "No packages to install"

    - name: Run dbt seed
      run: |
        cd weather_data_project/my_project
        dbt seed || echo "No seeds to run"

    - name: Run dbt run
      run: |
        cd weather_data_project/my_project
        dbt run

    - name: Run dbt test
      run: |
        cd weather_data_project/my_project
        dbt test || echo "Some tests failed, but continuing..."

    - name: Generate dbt docs
      run: |
        cd weather_data_project/my_project
        dbt docs generate


    - name: Commit and push updated data (if needed)
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add any generated files that should be committed
        if [ -d "weather_data_project/target" ]; then
          git add weather_data_project/target/manifest.json || true
          git add weather_data_project/target/run_results.json || true
        fi
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Automated data update - $(date)"
          git push
        fi

    - name: Upload dbt logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dbt-logs
        path: |
          weather_data_project/logs/
          weather_data_project/my_project/logs/
        retention-days: 7

    - name: Notify on failure
      if: failure()
      run: |
        echo "Pipeline failed at $(date)"
        # Add notification logic here (Slack, email, etc.)
        # Example for Slack webhook:
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"Weather data pipeline failed!"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}